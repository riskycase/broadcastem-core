import Express, { response } from 'express';
import path from 'path';
import logger from 'morgan';
const uikit = require.resolve('uikit');

// Imports all the required routes
import { router as indexRouter } from './routes/index';
import { router as uploadRouter } from './routes/upload';
import { router as downloadRouter } from './routes/download';

/*
 * Sets up logging for the app
 *
 * Takes Express app and adds logger to it
 */
function setLogging(
	app: Express.Express,
	loggingLevel: 0 | 1 | 2,
	stdout: NodeJS.WriteStream
) {
	// Sets the format to be used for logging
	const format: string =
		':method request for :url resulted in status code :status - :response-time ms';

	if (isNaN(loggingLevel) || loggingLevel > 2 || loggingLevel < 0)
		loggingLevel = 0;

	stdout = stdout || process.stdout;

	if (loggingLevel === 2)
		app.use(
			logger(format, {
				stream: stdout,
			})
		);
	else if (loggingLevel === 1)
		app.use(
			logger(format, {
				stream: stdout,
				skip: (request: Express.Request, resonse: Express.Response) =>
					response.statusCode < 400,
			})
		);
}

/*
 * Initialises an Express app with the view generator, plugins and routes
 *
 * Takes Express app which is modified and returns nothing
 */
function initialize(app: Express.Express) {
	app.use(Express.json());
	app.use(Express.urlencoded({ extended: false }));

	// Sets Express to serve the fonts, CSS and JS for the websites
	app.use(Express.static(path.join(__dirname, '..', 'public')));
	// Since UIKit directly exports the js file, we take the path of that file
	// and go two directories up to get the dist folder
	app.use(Express.static(path.resolve(uikit, '..', '..')));

	app.use('/', indexRouter);
	app.use('/download', downloadRouter);
	app.use('/upload', uploadRouter);
}

/*
 * Adds the 404 and error handlers which should come at the end of the app calls
 *
 * Takes Express app which is modified and returns nothing
 */
function handlers(app: Express.Express) {
	// Catchs 404 and forwards to error handler
	app.use(function (
		request: Express.Request,
		resonse: Express.Response,
		next: Express.NextFunction
	) {
		const error: error = new Error('Resource not found');
		error.status = 404;
		return next(error);
	});

	// Handles all the errors generated by routes
	app.use(function (
		error: error,
		request: Express.Request,
		response: Express.Response,
		next: Express.NextFunction
	) {
		// Sets the error status code and sends a JSON describing the error
		response.status(error.status).json({
			status: error.status,
			message: error.message,
		});
	});
}

/*
 * Creates an Express app with the options specified
 *
 * Takes options object or nothing and returns a promise that resolves to an Express app
 */
function init(
	options: options = {
		loggingLevel: 0,
		stdout: process.stdout,
		restart: true,
		destination: path.resolve(__dirname, '..', 'uploads'),
	}
): Promise<Express.Express> {
	const app = Express();

	// Set logging only if neccessary
	if (options.loggingLevel)
		setLogging(app, options.loggingLevel, options.stdout);

	return new Promise((resolve, reject) => {
		// If restart flag is not set, default to true
		if (options.restart === undefined) options.restart = true;

		require('./middleware/fileManager')
			.initFiles(options)
			.then(() => {
				initialize(app);
				handlers(app);
				resolve(app);
			})
			.catch((error: Error) => reject(error));
	});
}

export = init;
