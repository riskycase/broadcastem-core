const express = require("express");
const path = require("path");
const zip = require("express-easy-zip");
const logger = require("morgan");
const uikit = require.resolve("uikit");

// Imports all the required routes
const indexRouter = require("./routes/index");
const uploadRouter = require("./routes/upload");
const downloadRouter = require("./routes/download");

// Sets the format to be used for logging
const format =
  ":method request for :url resulted in status code :status - :response-time ms";

/*
 * Initialises an Express app with the view generator, plugins and routes
 *
 * Takes express app which is modified and returns nothing
 */
function initialize(app) {
  // Use express-easy-zip to send folders as a zip file
  app.use(zip());
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));

  // Sets Express to serve the fonts, CSS and JS for the websites
  app.use(express.static(path.join(__dirname, "public")));
  // Since UIKit directly exports the js file, we take the path of that file
  // and go two directories up to get the dist folder
  app.use(express.static(path.resolve(uikit, "..", "..")));

  app.use("/", indexRouter);
  app.use("/download", downloadRouter);
  app.use("/upload", uploadRouter);
}

/*
 * Adds the 404 and error handlers which should come at the end of the app calls
 *
 * Takes express app which is modified and returns nothing
 */
function handlers(app) {
  // Catchs 404 and forwards to error handler
  app.use(function (req, res, next) {
    const error = new Error("Resource not found");
    error.status = 404;
    return next(error);
  });

  // Handles all the errors generated by routes
  app.use(function (err, req, res, next) {
    // Sets the error status code and sends a JSON describing the error
    res.status(err.status).json({
      status: err.status,
      message: err.message,
    });
  });
}

/*
 * Sets valid values for keys of the options which may be invaild
 *
 * Takes options object which is modified and returns nothing
 */
function cleanOptions(options) {
  if (
    isNaN(options.loggingLevel) ||
    options.loggingLevel > 2 ||
    options.loggingLevel < 0
  )
    options.loggingLevel = 0;
  if (options.restart === undefined) options.restart = true;
  if (!Array.isArray(options.files)) options.files = [];
  if (!options.destination)
    options.destination = path.resolve(
      path.basename(require.main.filename),
      "../uploads"
    );
  if (!options.stdout) options.stdout = process.stdout;
}

/*
 * Creates an Express app with the options specified
 *
 * Takes options object or nothing and returns a promise that resolves to an Express app
 */
module.exports.init = (options = {}) => {
  const app = express();

  cleanOptions(options);

  if (options.loggingLevel === 2)
    app.use(
      logger(format, {
        stream: options.stdout,
      })
    );
  else if (options.loggingLevel === 1)
    app.use(
      logger(format, {
        stream: options.stdout,
        skip: (req, res) => res.statusCode < 400,
      })
    );

  return new Promise((resolve, reject) => {
    require("./middleware/fileManager")
      .initFiles(options)
      .then(() => {
        initialize(app);
        handlers(app);
        resolve(app);
      })
      .catch((err) => reject(err));
  });
};
