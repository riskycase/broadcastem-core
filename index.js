const express = require('express');
const path = require('path');
const zip = require('express-easy-zip');
const logger = require('morgan');
const uikit = require.resolve('uikit');

// Imports all the required routes
const indexRouter = require('./routes/index');
const uploadRouter = require('./routes/upload');
const downloadRouter = require('./routes/download');

/*
 * Sets up logging for the app
 *
 * Takes express app and adds logger to it
 */
function setLogging(app, loggingLevel, stdout) {
	// Sets the format to be used for logging
	const format =
		':method request for :url resulted in status code :status - :response-time ms';

	if (isNaN(loggingLevel) || loggingLevel > 2 || loggingLevel < 0)
		loggingLevel = 0;

	stdout = stdout || process.stdout;

	if (loggingLevel === 2)
		app.use(
			logger(format, {
				stream: stdout,
			})
		);
	else if (loggingLevel === 1)
		app.use(
			logger(format, {
				stream: stdout,
				skip: (req, res) => res.statusCode < 400,
			})
		);
}

/*
 * Initialises an Express app with the view generator, plugins and routes
 *
 * Takes express app which is modified and returns nothing
 */
function initialize(app) {
	// Use express-easy-zip to send folders as a zip file
	app.use(zip());
	app.use(express.json());
	app.use(express.urlencoded({ extended: false }));

	// Sets Express to serve the fonts, CSS and JS for the websites
	app.use(express.static(path.join(__dirname, 'public')));
	// Since UIKit directly exports the js file, we take the path of that file
	// and go two directories up to get the dist folder
	app.use(express.static(path.resolve(uikit, '..', '..')));

	app.use('/', indexRouter);
	app.use('/download', downloadRouter);
	app.use('/upload', uploadRouter);
}

/*
 * Adds the 404 and error handlers which should come at the end of the app calls
 *
 * Takes express app which is modified and returns nothing
 */
function handlers(app) {
	// Catchs 404 and forwards to error handler
	app.use(function (req, res, next) {
		const error = new Error('Resource not found');
		error.status = 404;
		return next(error);
	});

	// Handles all the errors generated by routes
	app.use(function (err, req, res, next) {
		// Sets the error status code and sends a JSON describing the error
		res.status(err.status).json({
			status: err.status,
			message: err.message,
		});
	});
}

/*
 * Creates an Express app with the options specified
 *
 * Takes options object or nothing and returns a promise that resolves to an Express app
 */
module.exports.init = (options = {}) => {
	const app = express();

	// Set logging only if neccessary
	if (options.loggingLevel)
		setLogging(app, options.loggingLevel, options.stdout);

	return new Promise((resolve, reject) => {
		// If restart flag is not set, default to true
		if (options.restart === undefined) options.restart = true;

		require('./middleware/fileManager')
			.initFiles(options)
			.then(() => {
				initialize(app);
				handlers(app);
				resolve(app);
			})
			.catch(err => reject(err));
	});
};
